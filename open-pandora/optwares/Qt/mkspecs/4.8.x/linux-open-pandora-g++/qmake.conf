#
# qmake configuration for building with arm-linux-gnueabi-g++
#

CROSS_DEVICE = open-pandora
CROSS_DEVICE_VENDOR = arm-openpandora-linux-gnueabi
CROSS_DEVICE_CFLAGS = -O3 -pipe -march=armv7-a -mtune=cortex-a8 -mfpu=neon -mfloat-abi=softfp -ftree-vectorize -fsingle-precision-constant -fsigned-char

CROSS_TOOLCHAINS_PATH = /opt/cross/x-tools
CROSS_DEVICE_TOOLCHAIN_PATH = $${CROSS_TOOLCHAINS_PATH}/$${CROSS_DEVICE}/$${CROSS_DEVICE_VENDOR}
CROSS_DEVICE_TOOLCHAIN_BIN_PATH = $${CROSS_DEVICE_TOOLCHAIN_PATH}/bin
CROSS_DEVICE_TOOLCHAIN_BIN_PREFIX_PATH = $${CROSS_DEVICE_TOOLCHAIN_PATH}/bin/$${CROSS_DEVICE_VENDOR}-
CROSS_DEVICE_TOOLCHAIN_SYSROOT_PATH = $${CROSS_DEVICE_TOOLCHAIN_PATH}/$${CROSS_DEVICE_VENDOR}/sysroot

CROSS_DEVICE_SDK_PATH = $${CROSS_TOOLCHAINS_PATH}/$${CROSS_DEVICE}/SDK
CROSS_DEVICE_OPTWARES_PATH = $${CROSS_DEVICE_SDK_PATH}/opt/local

_QVERSION = $${QT_VERSION}
isEmpty( _QVERSION ) {
    _QVERSION = $$[QT_VERSION]
}

MAKEFILE_GENERATOR      = UNIX
TARGET_PLATFORM         = unix
TEMPLATE                = app
CONFIG                  += qt warn_on release incremental link_prl gdb_dwarf_index
QT                      += core gui
QMAKE_INCREMENTAL_STYLE = sublib

include(../common/linux.conf)
include(../common/gcc-base-unix.conf)
include(../common/g++-unix.conf)

QT_ARCH = armv7
QMAKE_CFLAGS_RELEASE = $${CROSS_DEVICE_CFLAGS}
QMAKE_LFLAGS = -L$${CROSS_DEVICE_SDK_PATH}/opt/Qt/$${_QVERSION}/lib -Wl,-rpath,$${CROSS_DEVICE_SDK_PATH}/usr/lib
QMAKE_LFLAGS_RPATH = -Wl,-rpath,

DEFINES *= PANDORA
QMAKE_INCDIR    = $${CROSS_DEVICE_SDK_PATH}/usr/include $${CROSS_DEVICE_SDK_PATH}/usr/include/dbus-1.0 $${CROSS_DEVICE_SDK_PATH}/usr/lib/dbus-1.0/include $${CROSS_DEVICE_SDK_PATH}/usr/include/freetype2 $${CROSS_DEVICE_OPTWARES_PATH}/include
QMAKE_INCDIR_OPENGL = $${CROSS_DEVICE_SDK_PATH}/usr/include
QMAKE_INCDIR_OPENGL_ES1CL = $${CROSS_DEVICE_SDK_PATH}/usr/include
QMAKE_INCDIR_OPENGL_ES1 = $${CROSS_DEVICE_SDK_PATH}/usr/include
QMAKE_INCDIR_OPENGL_ES2 = $${CROSS_DEVICE_SDK_PATH}/usr/include
QMAKE_INCDIR_EGL = $${CROSS_DEVICE_SDK_PATH}/usr/include
QMAKE_INCDIR_OPENVG = $${CROSS_DEVICE_SDK_PATH}/usr/include/VG
QMAKE_LIBDIR    = $${CROSS_DEVICE_TOOLCHAIN_SYSROOT_PATH}/lib $${CROSS_DEVICE_TOOLCHAIN_SYSROOT_PATH}/usr/lib $${CROSS_DEVICE_SDK_PATH}/lib $${CROSS_DEVICE_SDK_PATH}/usr/lib $${CROSS_DEVICE_OPTWARES_PATH}/lib
QMAKE_LIBDIR_OPENGL = $${CROSS_DEVICE_SDK_PATH}/usr/lib
QMAKE_LIBDIR_OPENGL_ES1CL = $$QMAKE_LIBDIR_OPENGL
QMAKE_LIBDIR_OPENGL_ES1 = $$QMAKE_LIBDIR_OPENGL
QMAKE_LIBDIR_OPENGL_ES2 = $$QMAKE_LIBDIR_OPENGL
QMAKE_LIBDIR_EGL = $${CROSS_DEVICE_SDK_PATH}/usr/lib
QMAKE_LIBDIR_OPENVG =
QMAKE_LIBDIR_X11 = $${CROSS_DEVICE_SDK_PATH}/usr/lib
QMAKE_INCDIR_X11        = $${CROSS_DEVICE_SDK_PATH}/usr/include

# modifications to g++.conf
QMAKE_CC                = $${CROSS_DEVICE_TOOLCHAIN_BIN_PREFIX_PATH}gcc
QMAKE_LINK_C            = $${CROSS_DEVICE_TOOLCHAIN_BIN_PREFIX_PATH}gcc
QMAKE_LINK_C_SHLIB      = $${CROSS_DEVICE_TOOLCHAIN_BIN_PREFIX_PATH}gcc
QMAKE_CXX               = $${CROSS_DEVICE_TOOLCHAIN_BIN_PREFIX_PATH}g++
QMAKE_LINK              = $${CROSS_DEVICE_TOOLCHAIN_BIN_PREFIX_PATH}g++
QMAKE_LINK_SHLIB        = $${CROSS_DEVICE_TOOLCHAIN_BIN_PREFIX_PATH}g++

# modifications to linux.conf
QMAKE_AR                = $${CROSS_DEVICE_TOOLCHAIN_BIN_PREFIX_PATH}ar cqs
QMAKE_OBJCOPY           = $${CROSS_DEVICE_TOOLCHAIN_BIN_PREFIX_PATH}objcopy
QMAKE_STRIP             = $${CROSS_DEVICE_TOOLCHAIN_BIN_PREFIX_PATH}strip
QMAKE_RANLIB            = $${CROSS_DEVICE_TOOLCHAIN_BIN_PREFIX_PATH}ranlib

load(qt_config)
